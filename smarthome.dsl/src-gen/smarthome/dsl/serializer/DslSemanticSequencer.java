/*
 * generated by Xtext 2.14.0
 */
package smarthome.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import smarthome.AnalogSensor;
import smarthome.DigitalSensor;
import smarthome.Duration;
import smarthome.Home;
import smarthome.Pattern;
import smarthome.Person;
import smarthome.PersonPredicate;
import smarthome.Room;
import smarthome.Rule;
import smarthome.SensorPredicate;
import smarthome.SmarthomePackage;
import smarthome.Tag;
import smarthome.dsl.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmarthomePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmarthomePackage.ANALOG_SENSOR:
				sequence_AnalogSensor(context, (AnalogSensor) semanticObject); 
				return; 
			case SmarthomePackage.DIGITAL_SENSOR:
				sequence_DigitalSensor(context, (DigitalSensor) semanticObject); 
				return; 
			case SmarthomePackage.DURATION:
				sequence_Duration(context, (Duration) semanticObject); 
				return; 
			case SmarthomePackage.HOME:
				sequence_Home(context, (Home) semanticObject); 
				return; 
			case SmarthomePackage.PATTERN:
				sequence_Pattern(context, (Pattern) semanticObject); 
				return; 
			case SmarthomePackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case SmarthomePackage.PERSON_PREDICATE:
				sequence_PersonPredicate(context, (PersonPredicate) semanticObject); 
				return; 
			case SmarthomePackage.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			case SmarthomePackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case SmarthomePackage.SENSOR_PREDICATE:
				sequence_SensorPredicate(context, (SensorPredicate) semanticObject); 
				return; 
			case SmarthomePackage.TAG:
				sequence_Tag(context, (Tag) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Sensor returns AnalogSensor
	 *     AnalogSensor returns AnalogSensor
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_AnalogSensor(ISerializationContext context, AnalogSensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.NAMED_ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.NAMED_ENTITY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnalogSensorAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns DigitalSensor
	 *     DigitalSensor returns DigitalSensor
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_DigitalSensor(ISerializationContext context, DigitalSensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.NAMED_ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.NAMED_ENTITY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDigitalSensorAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Duration returns Duration
	 *
	 * Constraint:
	 *     (time=EInt precision=Precision)
	 */
	protected void sequence_Duration(ISerializationContext context, Duration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.DURATION__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.DURATION__TIME));
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.DURATION__PRECISION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.DURATION__PRECISION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDurationAccess().getTimeEIntParserRuleCall_1_0(), semanticObject.getTime());
		feeder.accept(grammarAccess.getDurationAccess().getPrecisionPrecisionEnumRuleCall_2_0(), semanticObject.getPrecision());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Home returns Home
	 *
	 * Constraint:
	 *     (
	 *         fileEvents=EString 
	 *         (rooms+=Room rooms+=Room*)? 
	 *         (persons+=Person persons+=Person*)? 
	 *         (patterns+=Pattern patterns+=Pattern*)? 
	 *         (monitoredEntities+=[NamedEntity|EString] monitoredEntities+=[NamedEntity|EString]*)?
	 *     )
	 */
	protected void sequence_Home(ISerializationContext context, Home semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pattern returns Pattern
	 *
	 * Constraint:
	 *     (name=EString (rules+=Rule rules+=Rule*)?)
	 */
	protected void sequence_Pattern(ISerializationContext context, Pattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns PersonPredicate
	 *     PersonPredicate returns PersonPredicate
	 *
	 * Constraint:
	 *     (person=[Person|EString] activity=Activity)
	 */
	protected void sequence_PersonPredicate(ISerializationContext context, PersonPredicate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.PERSON_PREDICATE__PERSON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.PERSON_PREDICATE__PERSON));
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.PERSON_PREDICATE__ACTIVITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.PERSON_PREDICATE__ACTIVITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersonPredicateAccess().getPersonPersonEStringParserRuleCall_1_0_1(), semanticObject.eGet(SmarthomePackage.Literals.PERSON_PREDICATE__PERSON, false));
		feeder.accept(grammarAccess.getPersonPredicateAccess().getActivityActivityEnumRuleCall_3_0(), semanticObject.getActivity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Person
	 *
	 * Constraint:
	 *     (name=EString ankleLeft=Tag ankleRight=Tag belt=Tag chest=Tag)
	 */
	protected void sequence_Person(ISerializationContext context, Person semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.NAMED_ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.NAMED_ENTITY__NAME));
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.PERSON__ANKLE_LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.PERSON__ANKLE_LEFT));
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.PERSON__ANKLE_RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.PERSON__ANKLE_RIGHT));
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.PERSON__BELT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.PERSON__BELT));
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.PERSON__CHEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.PERSON__CHEST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersonAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPersonAccess().getAnkleLeftTagParserRuleCall_5_0(), semanticObject.getAnkleLeft());
		feeder.accept(grammarAccess.getPersonAccess().getAnkleRightTagParserRuleCall_7_0(), semanticObject.getAnkleRight());
		feeder.accept(grammarAccess.getPersonAccess().getBeltTagParserRuleCall_9_0(), semanticObject.getBelt());
		feeder.accept(grammarAccess.getPersonAccess().getChestTagParserRuleCall_11_0(), semanticObject.getChest());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Room returns Room
	 *
	 * Constraint:
	 *     (name=EString (sensors+=Sensor sensors+=Sensor*)?)
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     ((predicates+=Predicate predicates+=Predicate*)? duration=Duration?)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns SensorPredicate
	 *     SensorPredicate returns SensorPredicate
	 *
	 * Constraint:
	 *     (sensor=[Sensor|EString] operator=Operator value=EDouble)
	 */
	protected void sequence_SensorPredicate(ISerializationContext context, SensorPredicate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.SENSOR_PREDICATE__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.SENSOR_PREDICATE__SENSOR));
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.SENSOR_PREDICATE__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.SENSOR_PREDICATE__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.SENSOR_PREDICATE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.SENSOR_PREDICATE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorPredicateAccess().getSensorSensorEStringParserRuleCall_1_0_1(), semanticObject.eGet(SmarthomePackage.Literals.SENSOR_PREDICATE__SENSOR, false));
		feeder.accept(grammarAccess.getSensorPredicateAccess().getOperatorOperatorEnumRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getSensorPredicateAccess().getValueEDoubleParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tag returns Tag
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Tag(ISerializationContext context, Tag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmarthomePackage.Literals.NAMED_ENTITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmarthomePackage.Literals.NAMED_ENTITY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTagAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
